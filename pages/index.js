import { useState, useEffect } from "react";
import Head from "next/head";
import Header from "../components/Header";
import Button from "@material-tailwind/react/Button";
import Icon from "@material-tailwind/react/Icon";
import Image from "next/image";
import GoogleDocsPlus from "../media/google-docs-plus.png";
import Login from "../components/Login";
import Modal from "@material-tailwind/react/Modal";
import ModalBody from "@material-tailwind/react/ModalBody";
import ModalFooter from "@material-tailwind/react/ModalFooter";
import { auth, db } from "../firebase";
import firebase from "firebase";
import DocumentRow from "../components/DocumentRow";
import { useRouter } from "next/router";

export default function Home() {
  const [user, setUser] = useState([]);
  const router = useRouter();
  const [showModal, setShowModal] = useState(false);
  const [input, setInput] = useState("");
  const [userDocs, setUserDocs] = useState([]);
  const [userDocsUpdate, setUserDocsUpdate] = useState(false);

  useEffect(() => {
    auth.onAuthStateChanged((user) => setUser(user));
  }, [user]);

  useEffect(() => {
    if (user) {
      db.collection("userDocs")
        .doc(user.email)
        .collection("docs")
        .orderBy("timestamp", "desc")
        .get()
        .then((docs) => {
          let userDocuments = [];
          docs.forEach((doc) => {
            userDocuments.push({ id: doc.id, ...doc.data() });
          });
          setUserDocs(userDocuments);
        });
    }
  }, [user, userDocsUpdate]);

  const createDocument = () => {
    if (!input) return;
    db.collection("userDocs")
      .doc(user.email)
      .collection("docs")
      .add({
        fileName: input,
        timestamp: firebase.firestore.FieldValue.serverTimestamp(),
      })
      .then((docRef) => {
        router.push(`/doc/${docRef.id}`);
      });
    setInput("");
    setShowModal(false);
  };

  const modal = (
    <Modal size="sm" active={showModal} toggler={() => setShowModal(false)}>
      <ModalBody>
        <input
          value={input}
          onChange={(e) => setInput(e.target.value)}
          type="text"
          className="outline-none w-full"
          placeholder="Enter name of document..."
          onKeyDown={(e) => e.key === "Enter" && createDocument()}
        />
      </ModalBody>
      <ModalFooter>
        <Button
          color="blue"
          buttonType="link"
          onClick={() => setShowModal(false)}
          ripple="dark"
        >
          Cancel
        </Button>
        <Button color="blue" onClick={createDocument} ripple="light">
          Create
        </Button>
      </ModalFooter>
    </Modal>
  );

  return (
    <div>
      <Head>
        <title>Google Docs Clone</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {user ? (
        <>
          {modal}
          <Header />
          <section className="bg-[#f8f9fa] pb-10 px-10">
            <div className="max-w-3xl mx-auto">
              <div className="flex items-center justify-between py-6">
                <h2 className="text-gray-700 text-lg">Start a new document</h2>
                <Button
                  color="gray"
                  buttonType="outline"
                  rounded={true}
                  iconOnly={true}
                  ripple="dark"
                  className="h-20 w-20 border-0"
                >
                  <Icon name="more_vert" size="3xl" />
                </Button>
              </div>
              <div>
                <div
                  className="relative h-52 w-40 border-2 cursor-pointer hover:border-blue-700"
                  onClick={() => setShowModal(true)}
                >
                  <Image src={GoogleDocsPlus} layout="fill" />
                </div>
                <p className="ml-2 mt-2 font-semibold text-sm text-gray-700">
                  Blank
                </p>
              </div>
            </div>
          </section>
          <section className="bg-white px-10 md:px-0">
            <div className="max-w-3xl mx-auto py-8">
              <div className="flex items-center justify-between pb-5 text-sm text-gray-700">
                <h2 className="font-medium flex-grow">My Documents</h2>
                <p className="mr-12">Date Created</p>
                <Icon name="folder" size="3xl" color="gray" />
              </div>
              {userDocs?.map((doc) => (
                <DocumentRow
                  key={doc.id}
                  id={doc.id}
                  fileName={doc.fileName}
                  date={doc.timestamp}
                  email={user.email}
                  updateDocumentRow={() =>
                    setUserDocsUpdate(userDocsUpdate ? false : true)
                  }
                />
              ))}
            </div>
          </section>
        </>
      ) : (
        <Login />
      )}
    </div>
  );
}
